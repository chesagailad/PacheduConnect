name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Test backend API
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: pachedu_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Run linting
      run: |
        cd backend
        npm run lint

    - name: Run unit tests
      run: |
        cd backend
        npm run test:coverage
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: pachedu_test
        DB_USER: test
        DB_PASS: test
        REDIS_URL: redis://localhost:6379

    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Test frontend web app
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run type checking
      run: |
        cd frontend
        npm run type-check

    - name: Run linting
      run: |
        cd frontend
        npm run lint

    - name: Run unit tests
      run: |
        cd frontend
        npm run test:coverage

    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:5001

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Test mobile app
  mobile-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd mobile
        npm ci

    - name: Run linting
      run: |
        cd mobile
        npm run lint

    - name: Run tests
      run: |
        cd mobile
        npm test -- --coverage --watchAll=false

    - name: Upload mobile coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./mobile/coverage/lcov.info
        flags: mobile
        name: mobile-coverage

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        cd backend && npm audit --audit-level moderate
        cd ../frontend && npm audit --audit-level moderate
        cd ../mobile && npm audit --audit-level moderate

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # End-to-end testing
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: pachedu_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: |
        npm install -g @playwright/test
        playwright install --with-deps

    - name: Setup test database
      run: |
        cd backend
        npm run db:migrate
        npm run db:seed
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: pachedu_test
        DB_USER: test
        DB_PASS: test

    - name: Run E2E tests
      run: |
        npm run e2e
      env:
        BASE_URL: http://localhost:3000
        NODE_ENV: test

    - name: Upload E2E test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: e2e/test-results/

  # Performance testing
  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [e2e-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Run load tests
      run: |
        npm install -g artillery
        artillery run performance/load-test.yml

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: [backend-tests, frontend-tests, mobile-tests, security-scan]
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Build backend
      run: |
        cd backend
        npm ci
        npm run build

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}

    - name: Deploy to staging
      run: |
        # Add your deployment script here
        echo "Deploying to staging environment"
        # Example: Deploy to your staging infrastructure
        # docker build -t pachedu-backend:staging backend/
        # docker build -t pachedu-frontend:staging frontend/
        # kubectl apply -f deployment/staging/

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [e2e-tests, performance-tests]
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Build backend
      run: |
        cd backend
        npm ci
        npm run build

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}

    - name: Deploy to production
      run: |
        # Add your production deployment script here
        echo "Deploying to production environment"
        # Example: Deploy to your production infrastructure
        # docker build -t pachedu-backend:latest backend/
        # docker build -t pachedu-frontend:latest frontend/
        # kubectl apply -f deployment/production/

    - name: Notify deployment
      if: success()
      run: |
        # Send deployment notification
        echo "Production deployment successful"
        # curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
        #   -H 'Content-type: application/json' \
        #   --data '{"text":"ðŸš€ PacheduConnect deployed to production successfully!"}'

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [backend-tests, frontend-tests, mobile-tests, e2e-tests]
    steps:
    - name: Clean up test artifacts
      run: |
        echo "Cleaning up test artifacts"
        # Clean up any temporary resources